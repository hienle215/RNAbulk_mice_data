library(readxl)
library(DESeq2)

# -------------------------
# Step 1: Read data
# -------------------------
raw <- read_excel("C:\\Users\\leh\\OneDrive - TUNI.fi\\Desktop\\ISE LAB\\Ezh2_mouse_Markus_project\\20250326_Ezh2_Homo_GFP_HigvsWT_GFP_Hig_deg.xlsx")

raw <- as.data.frame(raw)

# -------------------------
# Step 2: Keep first 8 columns
# -------------------------
raw <- raw[, 1:8]   # columns 1=GeneID, 2=GeneName, 3-8=counts

# -------------------------
# Step 3: Gene names for rownames
# -------------------------
gene_names <- make.unique(as.character(raw[[2]]))  # column 2 = gene name

# -------------------------
# Step 4: Extract count columns (3â€“8)
# -------------------------
counts <- raw[, 3:8]

# Convert to numeric
counts <- as.data.frame(lapply(counts, as.numeric))

# Add rownames
rownames(counts) <- gene_names

# Build count matrix
count_matrix <- round(as.matrix(counts))
storage.mode(count_matrix) <- "integer"

# Remove rows with all 0 counts
count_matrix <- count_matrix[rowSums(count_matrix) > 0, ]

# -------------------------
# Step 5: Sample metadata
# -------------------------
colnames(count_matrix) <- c("Homo1","Homo2","Homo3","WT1","WT2","WT3")

colData <- data.frame(
  row.names = colnames(count_matrix),
  condition = factor(c(rep("Homo-GFP-high",3), rep("WT-GFP-high",3)))
)

# -------------------------
# Step 6: DESeq2 workflow
# -------------------------
dds <- DESeqDataSetFromMatrix(countData = count_matrix,
                              colData = colData,
                              design = ~ condition)

dds <- DESeq(dds)
res <- results(dds)

# -------------------------
# Step 7: Merge results with gene IDs/names
# -------------------------
res_df <- as.data.frame(res)

# Attach GeneID + GeneName from original raw
res_df <- cbind(raw[match(rownames(res_df), gene_names), 1:2], res_df)

head(res_df)
# Convert DESeq2 results to data.frame
res_df <- as.data.frame(res)

# Match gene_name (rownames of res) to raw$gene_name
res_df$gene_id <- raw$gene_id[match(rownames(res_df), raw$gene_name)]

# Reorder columns (gene_id first, then gene_name, then stats)
res_df <- cbind(gene_id = res_df$gene_id,
                gene_name = rownames(res_df),
                res_df[, -ncol(res_df)])   # drop duplicate gene_id column

head(res_df)

############################################ data from hOrg and IFN treatment
library(readxl)
library(VennDiagram)
library(reshape2)
library(rlist)
library(numform)
library(ggpubr)
library(mGSZ)
library(gridExtra)
library(ggplotify)
library(cowplot)

#open data sets for comparisons
CDres <- readRDS("C:/Users/leh/OneDrive - TUNI.fi/Desktop/ISE LAB/CEC-3 ZED1227-dose/100mg CEC3/our data/reviewers comments/scripts for publication/input_data/Celiac biopsies DEG results.rds")
CDraw <-readRDS("C:/Users/leh/OneDrive - TUNI.fi/Desktop/ISE LAB/CEC-3 ZED1227-dose/100mg CEC3/our data/reviewers comments/scripts for publication/input_data/Celiac biopsies DESeqDataSet object.rds")

metadata <- colData(CDraw)

ORG <- readRDS('C:/Users/leh/OneDrive - TUNI.fi/Desktop/ISE LAB/CEC-3 ZED1227-dose/100mg CEC3/our data/reviewers comments/scripts for publication/input_data/hDuo ZED1277 DEG results.rds')

DEG1 <- CDres[[1]]
DEG_IFNg <- ORG[[2]]

#create theme for all plots
mytheme <- theme_classic(base_family='sans') + theme(axis.text.x = element_text(size=6, color = "black"),
                                                     axis.text.y= element_text(size=6, color = "black"),
                                                     axis.title.y = element_text(size=7, color = "black"),
                                                     axis.title.x = element_text(size=7, color = "black"),
                                                     legend.text = element_text( size = 5, color = "black"),
                                                     legend.key.size = unit(5, 'mm'),
                                                     legend.position = "top",
                                                     legend.title = element_blank(),
                                                     plot.title = element_text(hjust = 0.5, size = 7,face = "bold"),
                                                     axis.line = element_line(colour = "black", linewidth=1/.pt),
                                                     panel.background = element_rect(fill = 'White'),
                                                     panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                                                     strip.text.x = element_text(size = 5.5, colour = "black"),
                                                     axis.title.x.top = element_text(color='#4daf4a',size=7), 
                                                     axis.text.x.top = element_text(color='#4daf4a',size=6))

palette_bio <- c("#00b347","#006729","#6500ff","#ff6500")

## compare between res and CDraw

#----------------------------------------------------------------------------panel A Venn ------------------------------------------------------------------------------------------------
raw <- read_excel("C:\\Users\\leh\\OneDrive - TUNI.fi\\Desktop\\ISE LAB\\Ezh2_mouse_Markus_project\\20250326_Ezh2_Homo_GFP_HigvsWT_GFP_Hig_deg.xlsx")
gene_ids <- raw$gene_id
gene_names <- raw$gene_name

# When you created DESeq2 object you kept only gene_names as rownames
# Now, build a mapping table
map_table <- data.frame(GeneID = gene_ids,
                        GeneName = make.unique(as.character(gene_names)),
                        stringsAsFactors = FALSE)

# Now match to res rownames
res$GeneID <- map_table$GeneID[match(rownames(res), map_table$GeneName)]

res_sig = res_sig <- res[!is.na(res$padj) & res$padj < 0.05, ]
res_gene = toupper(rownames(res_sig))
DEG_IFNg_gene = DEG_IFNg[DEG_IFNg$Gene.type=="DE",]$external_gene_name

p1 <- grobTree(
  venn.diagram(
    x = list(
      "Homo VS WT"   = res_gene,
      "IFNg VS mock" = DEG_IFNg_gene
    ),
    filename = NULL,
    fontfamily = "sans",
    cex = 1.5,                # numbers inside the circles
    cat.fontfamily = "sans",
    cat.cex = 1.2,             # category labels
    cat.pos = c(0, 0),         # put labels near the middle
    cat.dist = c(0.03, 0.03),  # distance from circle
    cat.just = list(c(0.5,0.5), c(0.5,0.5)),  # center the labels
    col = c(alpha("#ff6500", 0.5), alpha("#8267BE", 0.5)),
    fill = c(alpha("#ff6500", 0.3), alpha("#8267BE", 0.3)),
    margin = 0.1
  )
)

A <- ggarrange(as.ggplot(p1))
A


#--------------------------------------------------------------------------panel B ------------------------------------------------------------------------------------------------------------------------------

#Sample GSZ
mglist <- readRDS("C:/Users/leh/OneDrive - TUNI.fi/Desktop/ISE LAB/CEC-3 ZED1227-dose/100mg CEC3/our data/reviewers comments/scripts for publication/input_data/IFNg_list_of_interest_human_ENSEMBL.rds")

raw <- read_excel("C:\\Users\\leh\\OneDrive - TUNI.fi\\Desktop\\ISE LAB\\Ezh2_mouse_Markus_project\\20250326_Ezh2_Homo_GFP_HigvsWT_GFP_Hig_deg.xlsx")
raw <- as.data.frame(raw)
raw <- raw[, 1:8]   # columns 1=GeneID, 2=GeneName, 3-8=counts
gene_names <- make.unique(as.character(raw$gene_id))  # column 2 = gene name
counts <- raw[, 3:8]
counts <- as.data.frame(lapply(counts, as.numeric))
rownames(counts) <- gene_names
count_matrix <- round(as.matrix(counts))
storage.mode(count_matrix) <- "integer"
count_matrix <- count_matrix[rowSums(count_matrix) > 0, ]
colnames(count_matrix) <- c("Homo1","Homo2","Homo3","WT1","WT2","WT3")
colData <- data.frame(
  row.names = colnames(count_matrix),
  condition = factor(c(rep("Homo-GFP-high",3), rep("WT-GFP-high",3)))
)
dds <- DESeqDataSetFromMatrix(countData = count_matrix,
                              colData = colData,
                              design = ~ condition)
dds <- DESeq(dds)

normalised_counts <- counts(dds, normalized=TRUE) 
tran_data<- log2(normalised_counts+1)
#tran_data<- log2(counts(CDraw)+1)
metadata <- colData(dds)

#function for calculate Sample GSZ
Sample.GSZ <- function(gene.set,ex.data){
  GSZ <- data.frame(Samples=colnames(ex.data))
  for(i in 1:length(gene.set)){
    genes <- intersect(gene.set[[i]], row.names(ex.data))
    tmp <- sqrt(length(genes)) * ( colMeans( na.omit(ex.data[genes,] )) - colMeans( ex.data ) ) / matrixStats::colSds(as.matrix(ex.data))
    tmp <- tmp-mean(tmp)
    names(tmp) <- colnames(ex.data)
    tmp <- as.data.frame(tmp)
    colnames(tmp) <- names(gene.set)[i]
    GSZ <- cbind(GSZ,tmp)
  }
  return(GSZ)
  
}
# convert mouse gene to homo ID
library(homologene)
library(biomaRt)
genes_ID = rownames(tran_data)
ortholog_table <- getBM(
    attributes = c(
        "ensembl_gene_id",
        "hsapiens_homolog_ensembl_gene",
        "hsapiens_homolog_associated_gene_name"
    ),
    filters = "ensembl_gene_id",
    values = genes_ID,
    mart = mart
)

# convert mouse gene ID to homo gene ID in the tran_data object
ortholog_table <- ortholog_table[ortholog_table$hsapiens_homolog_ensembl_gene != "", ]
mouse_ids <- rownames(tran_data)
map <- ortholog_table[match(mouse_ids, ortholog_table$ensembl_gene_id), ]
tran_data_mapped <- tran_data[!is.na(map$hsapiens_homolog_ensembl_gene), ]
rownames(tran_data_mapped) <- map$hsapiens_homolog_ensembl_gene[!is.na(map$hsapiens_homolog_ensembl_gene)]
tran_data_human <- rowsum(tran_data_mapped, group = rownames(tran_data_mapped))
symbols_map <- unique(
  ortholog_table[, c("hsapiens_homolog_ensembl_gene", "hsapiens_homolog_associated_gene_name")]
)
tran_data_human_df <- data.frame(
  human_gene_id = rownames(tran_data_human),
  human_symbol  = symbols_map$hsapiens_homolog_associated_gene_name[
    match(rownames(tran_data_human), symbols_map$hsapiens_homolog_ensembl_gene)
  ],
  tran_data_human,
  row.names = NULL
)
dim(tran_data)          # before mapping
dim(tran_data_human)    # after mapping
head(tran_data_human_df)


#calculate Sample GSZ
SampleGSZ <- Sample.GSZ(gene.set=mglist,ex.data=tran_data_human)
GSZ_melt <- melt(SampleGSZ)
colnames(GSZ_melt)[2] <- "gene.sets"

# Draw the boxplot
library(ggplot2)
library(ggpubr)
library(reshape2)

# If SampleGSZ is a list-like, coerce to data.frame
SampleGSZ <- as.data.frame(SampleGSZ)

# Add group info
SampleGSZ$Group <- ifelse(grepl("^Homo", SampleGSZ$Samples), "Homo", "WT")

# Keep only the 3 gene sets of interest
df_long <- melt(
  SampleGSZ,
  id.vars = c("Samples", "Group"),
  measure.vars = c("epithelial_IFNg_responce",
                   "epithelial_IFNg_responce_CeD",
                   "REACTOME_INTERFERON_GAMMA_SIGNALING"),
  variable.name = "GeneSet",
  value.name = "Score"
)

# Make GeneSet names nicer (optional)
df_long$GeneSet <- factor(df_long$GeneSet,
                          levels = c("epithelial_IFNg_responce",
                                     "epithelial_IFNg_responce_CeD",
                                     "REACTOME_INTERFERON_GAMMA_SIGNALING"),
                          labels = c("Epithelial IFNg Response",
                                     "Epithelial IFNg Response (CeD)",
                                     "Reactome IFNg Signaling"))

# Draw boxplots with t-test results
p <- ggplot(df_long, aes(x = Group, y = Score, fill = Group)) +
  geom_boxplot(outlier.shape = NA, alpha = 0.7) +
  geom_jitter(width = 0.15, size = 3) +
  stat_compare_means(method = "t.test", label = "p.format", size = 6) +  # bigger p-value label
  facet_wrap(~GeneSet, scales = "free_y") +
  labs(x = "Group", y = "GSZ Score") +
  theme_classic(base_size = 16) +
  theme(
    legend.position = "none",
    axis.title = element_text(size = 18, face = "bold"),
    axis.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold"),
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5)
  )

print(p)


